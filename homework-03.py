#!/usr/bin/env python

"""Homework-03 by student Vitalii Zaitsev
"""

__author__ = "Зайцев Виталий Владимирович, Vitalii Zaitsev"
__copyright__ = "Copyright 2020"
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = "Vitalii Zaitsev"
__email__ = "vvzaisev79@gmail.com"
__status__ = "Education"


# Урок 3. Функции

# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
# def user_friendly_division(var_1, var_2):
#     # Функция принимает 2 аргумента, делит 1-й аргумент на 2-й, возвращает результат
#     # Предусмотрена минорная обработка ошибка (проверка 2-го аргумента на 0)
#     if var_2 == 0:
#         return 'Деление на 0 невозможно, результат неопределён, попробуйте снова'
#     else:
#         return var_1 / var_2
#
#
# print(f"Результат деления: {user_friendly_division(float(input('Введите числитель:')), float(input('Введите знаменатель: ')))}")


# --------------------------------------------------------------------------------------------------------------------
# 2. Реализовать функцию, принимающую несколько параметров,
# описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.
# def user_description(first_name, last_name, year_of_birth, city_of_residence, email, phone):
#     # Функция вывода данных о пользователе.
#     # В строчку. По порядку. Без надежды на лучшее будущее)
#     print(f"Сведения о пользователе: "
#           f"имя {first_name}, "
#           f"фамилия {last_name}, "
#           f"год рождения {year_of_birth}, "
#           f"город проживания {city_of_residence}, "
#           f"email {email}, "
#           f"телефон {phone}")
#     return
#
#
# user_description(str(input("Введите имя пользователя: ")),
#                  str(input("Введите фамилию пользователя: ")),
#                  str(input("Введите год рождения: ")),
#                  str(input("Введите город проживания: ")),
#                  str(input("Введите email: ")),
#                  str(input("Введите телефон: ")))


# --------------------------------------------------------------------------------------------------------------------
# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента,
# и возвращает сумму наибольших двух аргументов.
# def my_func(var_1, var_2, var_3):
#     # Функция принимает три позиционных аргумента и возвращает сумму наибольших двух аргументов
#     # Реализовано через списки, так как имеет больший потенциа и не захламляет код многочисленными сравнениями
#     # Сама функция не имеет собственного приведения к типам, поэтому требуется аккуратно подавать входные аргументы
#     result_list = []
#     result_list.append(var_1)
#     result_list.append(var_2)
#     result_list.append(var_3)
#     result_list.sort(reverse=True)
#     return result_list[0]+result_list[1]
#
#
# print(f'Сумма наибольших двух аргументов: {my_func(float(input("Введите аргумент_1: ")), float(input("Введите аргумент_2: ")), float(input("Введите аргумент_3: ")))}')


# --------------------------------------------------------------------------------------------------------------------
# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y.
# Задание необходимо реализовать в виде функции my_func(x, y).
# При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами.
# Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
# def my_func(x, y):
#     # Функция принимает действительное положительное число x и целое отрицательное число y,
#     # выполняет возведение числа x в степень y
#     # Способ 1: Возведение в степень с помощью оператора **
#     # return x**y
#     # Способ 2: Возведение в степень без оператора **, предусматривающая использование цикла
#     i = 1
#     result = 0
#     y = abs(y)
#     while i <= y:
#         result = x * x
#         i += 1
#     return 1 / result
#
#
# print(f'Возведение числа x в степень y: {my_func(float(input("Введите действительное положительное число х: ")), int(input("Введите целое отрицательное число y: ")))}')


# --------------------------------------------------------------------------------------------------------------------
# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел.
# Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введен после нескольких чисел, то
# вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.


# Код "некрасивый", нет времени его "вычистить". Код работает
# summary = 0
# ready_to_exit = False
# while not ready_to_exit:
#     string_value = ''
#     string_value = input("Введите строку чисел, разделённых пробелом, для расчёта их суммы, либо символ q для выхода и вывода итоговой суммы")
#     if string_value.find('q') != -1:
#         ready_to_exit = True
#     else:
#         values_list = string_value.split()
#         input_correct = True
#         for each in values_list:
#             if not each.isdigit():
#                 print("Вы ввели НЕ число, повторите ввод")
#                 input_correct = False
#         if input_correct:
#             i = 0
#             while i < len(values_list):
#                 summary = summary + float(values_list[i])
#                 i += 1
#             print(f"Промежуточная сумма: {summary}")
#
# print(f"Итоговая сумма: {summary}")


# --------------------------------------------------------------------------------------------------------------------
# 6. Реализовать функцию int_func(),
# принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой.
# Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием.
# В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре.
# Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
# Необходимо использовать написанную ранее функцию int_func().

# Реализация 1: одно слово
# def int_func(var_1):
#     return var_1.title()
#
# print(f'Результирующее слово: {int_func(str(input("Введите слово из маленьких латинских букв:")))}')

# Реализация 2: несколько слов
# def int_func(var_1):
#     return var_1.title()
#
#
# def string_handling(var_1):
#     string_list1 = var_1.split()
#     string_list2 = []
#     i = 0
#     while i < len(string_list1):
#         string_list2.append(int_func(string_list1[i]))
#         i += 1
#     return ' '.join(string_list2)
#
#
# print(f'Результирующее слово: {string_handling(str(input("Введите слова из латинских букв в нижнем регистре:")))}')
