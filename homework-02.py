#!/usr/bin/env python

"""Homework-02 by student Vitalii Zaitsev
"""

__author__ = "Зайцев Виталий Владимирович, Vitalii Zaitsev"
__copyright__ = "Copyright 2020"
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = "Vitalii Zaitsev"
__email__ = "vvzaisev79@gmail.com"
__status__ = "Education"


# Урок 2. Встроенные типы и операции с ними

# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
# result_list = [None, True, 0b10, 0o10, 0x10, 1, 1.0, complex(1,1), "str", (1, "str"), {1, 2, 3}, {1:'value', 2:'key'}]
# i = 0
# print("Типы данных элементов списка:")
# while i < len(result_list):
#     print(type(result_list[i]))
#     i += 1

# --------------------------------------------------------------------------------------------------------------------
# 2. Для списка реализовать обмен значений соседних элементов, т.е.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().

# Инициализируем список
# length = int(input("Введите количество элементов списка (целое положительное число): "))
# result_list = []
# i = 1
# while i <= length:
#     result_list.extend(input("Введите элемент списка"))
#     i += 1
#
# # Если длина списка = 1, то нотификация и выход
# if len(result_list) == 1:
#     print(f"Список состоит из одного элемента {result_list[0]}, обменивать нечего");
#
# # Иначе сам алгоритм
# else:
#     print(f"Начинаем обмен значений списка")
#     print(f"Список до обмена: {result_list}")
#     # Проходим по списку, если (текущий индекс i нечётный) и (текущий индекс i < длина списка - 1), то меняем значения
#     i = 0
#     length = len(result_list)
#     while i < length:
#         if (i % 2 == 0) and (i < length - 1):
#             temp_value = result_list[i+1]
#             result_list[i+1] = result_list[i]
#             result_list[i] = temp_value
#         i += 1
#     print(f"Список после обмена: {result_list}")


# --------------------------------------------------------------------------------------------------------------------
# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

# Добиваемся корректного ввода от пользователя
# correct_input_was_made = False
# while not correct_input_was_made:
#     month = int(input("Введите месяц в виде целого числа от 1 до 12: "))
#     if month > 12 or month <= 0:
#         print(f"Вы ввели недопустимое значение месяца {month}, повторите попытку")
#     else:
#         correct_input_was_made = True

# Реализация определения сезона по списку времён года
# seasons_list = ["зима", "зима", "весна", "весна", "весна", "лето", "лето", "лето", "осень", "осень", "осень", "зима"]
# i = 0
# while i < len(seasons_list):
#     if month == (i + 1):
#         print(f"Время года вашего {month} месяца: {seasons_list[i]}")
#         break
#     i += 1

# Реализация выбора сезона по словарю времён года
# seasons_dictionary = {1: 'зима', 2: 'зима', 3: 'весна',
#                       4: 'весна', 5: 'весна', 6: 'лето',
#                       7: 'лето', 8: 'лето', 9: 'осень',
#                       10: 'осень', 11: 'осень', 12: 'зима'}
# key_exists = month in seasons_dictionary
# if key_exists:
#     print(f"Время года вашего {month} месяца: {seasons_dictionary.get(month)}")
# else:
#     print(f"Невозможно определить время года по вашему {month} месяцу, месяц не найден в словаре")


# --------------------------------------------------------------------------------------------------------------------
# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если слово длинное, выводить только первые 10 букв в слове.

# # Ввод
# input_string = str(input("Введите строку из нескольких слов, разделённых пробелами: "))
#
# # Вывод
# output_string = input_string.split()
# i = 0
# print("Вы ввели:")
# while i < len(output_string):
#     string = output_string[i]
#     print(f"{i}: {string[0:10]}")
#     i += 1


# --------------------------------------------------------------------------------------------------------------------
# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

# # Задаём структуру рейтинга
# rating = [9, 7, 3, 3, 2]
# print(f"Исходный рейтинг: {rating}")
#
# # Введите элемент рейтинга
# element = int(input("Введите новый элемент рейтинга: "))
#
# # Определяем место нового элемента в списке
# i = 0
# while i < len(rating):
#     if element >= rating[i]:
#         rating.insert(i, element)
#         break
#     else:
#         i += 1
#
# # Вывод результата
# print(f"Результирующий рейтинг: {rating}")


# --------------------------------------------------------------------------------------------------------------------
# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента:
# * номер товара
# * словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
#
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
#
# Необходимо собрать аналитику о товарах.
# Реализовать словарь, в котором каждый ключ — характеристика товара, например название,
# а значение — список значений-характеристик, например, список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }


# # Задаём количество позиций
# count = int(input("Сколько позиций товара вы ходите ввести? Укажите целое положительное значение:"))
#
# # Вводим описания
# item_list = []
# i = 0
# while i < count:
#     # Введите структуру товара
#     item_description = {"название": input("Введите название товара"),
#                        "цена": input("Введите цену"),
#                        "количество": input("Введите количество"),
#                         "ед": input("Введите единицы измерения")}
#     item_list.append(item_description)
#     i += 1
#
# # Превращаем в кортеж ("замораживаем" значения)
# tuple(item_list)
#
# # Формируем словарь с аналитикой, напомним задачу:
# # Реализовать словарь, в котором каждый ключ — характеристика товара, например название,
# # а значение — список значений-характеристик, например, список названий товаров.
# # Пример:
# # {
# # “название”: [“компьютер”, “принтер”, “сканер”],
# # “цена”: [20000, 6000, 2000],
# # “количество”: [5, 2, 7],
# # “ед”: [“шт.”]
# # }
# # Инициализируем структуру
# items_summary = {"название": [],
#                  "цена": [],
#                  "количество": [],
#                  "ед": []}
# # Для каждой структуры из item_list требуется:
# # * безусловно добавить список значений по ключу "название" (без проверки - есть ли оно уже либо нет)
# # * безусловно добавить список значений по ключу "цена" (без проверки - есть ли оно уже либо нет)
# # * безусловно добавить список значений по ключу "количество" (без проверки - есть ли оно уже либо нет)
# # * безусловно добавить список значений по ключу "единицы" (без проверки - есть ли оно уже либо нет)
# i = 0
# list_name = []
# list_price = []
# list_count = []
# list_amount = []
# while i < len(item_list):
#     value = item_list[i]
#     # value выглядит так
#     # value = {"название": "Товар 1",
#     #          "цена": 10,
#     #          "количество": 2,
#     #          "eд": "шт."}
#     list_name.append(value.get("название")) # ["Товар 1", "Товар 2"]
#     list_price.append(value.get("цена"))  # ["Цена 1", "Цена 2"]
#     list_count.append(value.get("количество"))  # ["Количество 1", "Количество 2"]
#     list_amount.append(value.get("ед"))  # ["шт.", "шт."]
#     i += 1
#
# items_summary.update({"название": list_name, "цена": list_price, "количество": list_count, "ед": list_amount})
# print(items_summary)



